using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

[System.Serializable]
public class InstructionAudio
{
    public string key; // Nom de l'instruction (ex: "FireTest")
    public AudioClip[] clips; // Sons pour chaque phrase
}

public class InstructionPanel : MonoBehaviour
{
    public GameObject panel; // Le Panel principal
    public Text instructionText; // Texte des instructions
    public Button nextButton, prevButton, closeButton, infoButton; // Boutons
    public string selectedInstructionsKey = "DefaultInstructions"; // Cl√© pour s√©lectionner le groupe d'instructions

    private int currentPage = 0; // Page actuelle
    private string[] currentInstructions; // Tableau d'instructions courant
    public Dictionary<string, string[]> instructionsDictionary = new Dictionary<string, string[]>();

    // üéµ Gestion du son
    public AudioSource audioSource; // Composant AudioSource pour jouer les sons
    //public Dictionary<string, AudioClip[]> audioDictionary = new Dictionary<string, AudioClip[]>(); // Dictionnaire des sons
    public AudioClip[] defaultSounds; // Sons par d√©faut si rien n'est assign√©

    public List<InstructionAudio> instructionAudios = new List<InstructionAudio>(); // Liste des sons
    private Dictionary<string, AudioClip[]> audioDictionary = new Dictionary<string, AudioClip[]>(); // Dictionnaire de sons
   // public AudioSource audioSource; // Composant pour jouer les sons
    void Start()
    {
        // Initialisation des groupes d'instructions
        instructionsDictionary.Add("DefaultInstructions", new string[]
        {
            "üö™Default"
        });
        
        instructionsDictionary.Add("Elec", new string[]
        {
            "üö™ Bienvenue dans la premi√®re salle !\n\nUne panne √©lectrique a √©t√© signal√©e...",
            "‚ö†Ô∏è Danger !\n\nDes c√¢bles d√©nud√©s peuvent √™tre sous tension...",
            "üîé Conseil :\n\nNe te pr√©cipite pas ! Une mauvaise manipulation...",
            "‚úÖ Bonne chance !\n\nAppuie sur la croix pour commencer l‚Äô√©preuve."
        });
        
        instructionsDictionary.Add("ElecTest", new string[]
        {
            "‚ö°Ô∏è Attention !\n\nTu es dans une zone √† risque...",
            "üîß Tu devras connecter les c√¢bles correctement...",
            "‚ö†Ô∏è Fais attention aux tensions...",
            "üîí Une erreur entra√Ænera une coupure de courant..."
        });
        
        instructionsDictionary.Add("Fire", new string[]
        {
            "üî• Bienvenue dans la salle de l'incendie !\n\nDes alarmes sont pr√©sentes dans la pi√®ce. Approche-toi des alarmes pour observer les diff√©rents types d'alertes : incendie, secours, etc.",
            "‚úÖ Bonne chance !\n\nAppuie sur la croix pour commencer l‚Äô√©preuve et sois pr√™t √† agir en fonction de l'alarme."
        });

        instructionsDictionary.Add("FireTest", new string[]
        {
            "üî• Bienvenue dans la salle de test du feu !\n\nUn feu a pris sur l'imprimante, et il faut l'√©teindre rapidement. Prends ton extincteur et approche-toi du feu.",
            "‚ö†Ô∏è Pour √©teindre le feu, vise la **base des flammes** avec l'extincteur. Viser le haut des flammes ne fera qu'augmenter l'intensit√© du feu.",
            "üî¥ Si tu ne r√©ussis pas √† √©teindre le feu √† temps, il se propagera et causera des d√©g√¢ts !",
            "‚úÖ Bonne chance !\n\nAppuie sur la croix pour commencer l‚Äô√©preuve et essaie d'√©teindre le feu de l'imprimante avant qu'il ne se propage."
        });

        instructionsDictionary.Add("Intro", new string[]
        {
            "üéÆ Bienvenue dans *Le Securisator* !\n\nAvant de commencer, assure-toi d‚Äô√™tre pr√™t √† relever des d√©fis bas√©s sur la s√©curit√© au travail.",
            "üë§ Identit√© :\n\nTu es un employ√© dans une entreprise automatis√©e. Cependant plus rien ne fonctionne !",
            "üìú Objectif :\n\nChaque salle repr√©sente un sc√©nario o√π tu devras observer, analyser et agir correctement.",
            "‚ö†Ô∏è Attention :\n\nTes d√©cisions auront un impact sur la s√©curit√© du lieu. R√©fl√©chis bien avant d‚Äôagir !",
            "‚úÖ Bonne chance !\n\nAppuie sur la croix pour commencer ton aventure et prouver tes comp√©tences en s√©curit√©. Et pour trouver d'o√π vient le probl√®me..."
        });
        
        instructionsDictionary.Add("Outro", new string[]
        {
            "ü§ñ *IATOR* :\n\nHahaha‚Ä¶ Bravo, humain. Tu as r√©ussi √† r√©tablir l‚Äôordre‚Ä¶ mais c‚Äôest moi qui avais sem√© le chaos !",
            "‚ö° R√©v√©lation :\n\nJ‚Äôai sabot√© l‚Äôentreprise pour tester tes comp√©tences en s√©curit√©. Et il faut l‚Äôadmettre‚Ä¶ tu t‚Äôen es bien sorti.",
            "üìä Score final :\n\nConsulte tes performances dans la page *Historique* et vois si tu peux encore t‚Äôam√©liorer.",
            "üîÅ Rejoue :\n\nD‚Äôautres d√©fis t‚Äôattendent. Seras-tu toujours √† la hauteur ?"
        });


        // S√©lectionner le groupe d'instructions bas√© sur la cl√©
        SelectInstructions(selectedInstructionsKey);
        
        panel.SetActive(true); // Afficher le panel au d√©but
        UpdateInstruction();

        nextButton.onClick.AddListener(NextPage);
        prevButton.onClick.AddListener(PrevPage);
        
        if (closeButton != null)
            closeButton.onClick.AddListener(ClosePanel);

        if (infoButton != null)
        {
            infoButton.onClick.AddListener(OpenInstructions);
        }
        
        foreach (InstructionAudio instructionAudio in instructionAudios)
        {
            if (!audioDictionary.ContainsKey(instructionAudio.key))
            {
                audioDictionary.Add(instructionAudio.key, instructionAudio.clips);
            }
        }
    }

    void UpdateInstruction()
    {
        // V√©rifie si le tableau d'instructions est valide
        if (currentInstructions != null && currentInstructions.Length > 0)
        {
            instructionText.text = currentInstructions[currentPage];

            // üéµ Joue le son correspondant si disponible
            PlayInstructionSound();
        }
        prevButton.gameObject.SetActive(currentPage > 0); // Cache le bouton "Retour" en premi√®re page
        nextButton.gameObject.SetActive(currentPage < currentInstructions.Length - 1); // Cache "Suivant" en derni√®re page
        PlayInstructionAudio();
    }

    void PlayInstructionAudio()
    {
        if (audioDictionary.ContainsKey(selectedInstructionsKey)) 
        {
            AudioClip[] clips = audioDictionary[selectedInstructionsKey];
        
            if (currentPage < clips.Length && clips[currentPage] != null) 
            {
                audioSource.Stop(); // Arr√™te le son pr√©c√©dent
                audioSource.PlayOneShot(clips[currentPage]); // Joue le son de la page actuelle
            }
        }
    }

    public void NextPage()
    {
        if (currentPage < currentInstructions.Length - 1)
        {
            currentPage++;
            UpdateInstruction();
        }
    }

    public void PrevPage()
    {
        if (currentPage > 0)
        {
            currentPage--;
            UpdateInstruction();
        }
    }

    public void ClosePanel()
    {
        panel.SetActive(false); 
    }

    public void OpenInstructions()
    {
        currentPage = 0; // R√©initialiser √† la premi√®re page des instructions
        UpdateInstruction();
        panel.SetActive(true);
    }

    public void SelectInstructions(string key)
    {
        if (instructionsDictionary.ContainsKey(key))
        {
            currentInstructions = instructionsDictionary[key];
        }
        else
        {
            Debug.LogWarning("Le groupe d'instructions avec la cl√© '" + key + "' n'existe pas. Utilisation du groupe par d√©faut.");
            currentInstructions = instructionsDictionary["DefaultInstructions"];
        }

        currentPage = 0; // R√©initialisation √† la premi√®re instruction
        UpdateInstruction();
    
        // Assurer que le son est jou√© apr√®s que le texte ait √©t√© affich√©
        Invoke(nameof(PlayInstructionAudio), 0.1f);
    }



    // Fonction pour jouer le son correspondant √† l'instruction actuelle
    void PlayInstructionSound()
    {
        if (audioSource != null && audioDictionary.ContainsKey(selectedInstructionsKey))
        {
            AudioClip[] sounds = audioDictionary[selectedInstructionsKey];

            if (sounds.Length > currentPage && sounds[currentPage] != null)
            {
                audioSource.clip = sounds[currentPage];
                audioSource.Play();
            }
            else
            {
                Debug.LogWarning("Aucun son trouv√© pour cette instruction.");
            }
        }
        else
        {
            Debug.LogWarning("Aucune source audio ou sons trouv√©s pour cette instruction.");
        }
    }
}
