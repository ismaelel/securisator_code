using UnityEngine;
using System.Collections.Generic;

public class CableDraggable : MonoBehaviour
{
    private bool isDragging = false;
    private Vector3 offset;  // L'offset entre la souris et le c√¢ble
    private Transform endPoint;  // Le point de fin du c√¢ble
    private LineRenderer lineRenderer;

    public Transform startPoint; // Le point de d√©part du c√¢ble
    public Transform endConnectPoint; // Le point o√π le c√¢ble peut se connecter (dynamique)
    
    public string cableID; // Identifiant unique pour chaque c√¢ble

    // Dictionnaire pour suivre les connexions
    public static Dictionary<string, string> cableConnections = new Dictionary<string, string>();

    void Start()
    {
        lineRenderer = GetComponent<LineRenderer>();
        lineRenderer.positionCount = 2;  // 2 positions : d√©part et fin

        // Initialisation : on s'assure que le c√¢ble n'est pas reli√© au d√©part
        if (startPoint != null)
        {
            lineRenderer.SetPosition(0, startPoint.position);
            lineRenderer.SetPosition(1, startPoint.position + new Vector3(0.5f, 0, 0));  // La fin commence √† la position du d√©but
        }
        
        // D√©sactiver la connexion de la fin du c√¢ble au d√©but
        endConnectPoint = null;
    }

    void Update()
    {
        if (isDragging)
        {
            // Calcule la position de la souris avec l'offset
            Vector3 mousePos = Camera.main.ScreenToWorldPoint(Input.mousePosition);
            mousePos.z = 0; // On s'assure qu'on reste en 2D

            // Applique l'offset pour que le c√¢ble suive la souris sans d√©calage
            transform.position = mousePos + offset;

            // Mise √† jour de la position de l'extr√©mit√© du c√¢ble (fin)
            lineRenderer.SetPosition(1, transform.position);
        }
        else
        {
            // Si on ne d√©place pas le c√¢ble, on met √† jour la ligne de connexion
            // Si le c√¢ble est reli√© √† un point de connexion, on le met √† jour
            if (endConnectPoint != null)
            {
                lineRenderer.SetPosition(1, endConnectPoint.position);
                Debug.Log("üîå C√¢ble reli√© √† : " + endConnectPoint.name);

                // Enregistrer la connexion dans le dictionnaire
                if (!cableConnections.ContainsKey(cableID))
                {
                    cableConnections.Add(cableID, endConnectPoint.name);
                }
            }
        }
    }

    void OnMouseDown()
    {
        // Ajout de log pour v√©rifier si le c√¢ble est cliqu√©
        Debug.Log("Le c√¢ble a √©t√© cliqu√© !");

        // Quand le c√¢ble est cliqu√©, on commence √† le d√©placer
        isDragging = true;

        // Calcule l'offset entre la position actuelle du c√¢ble et la souris
        Vector3 mousePos = Camera.main.ScreenToWorldPoint(Input.mousePosition);
        mousePos.z = 0;
        offset = transform.position - mousePos;
    }

    void OnMouseUp()
    {
        // Quand la souris est rel√¢ch√©e, le c√¢ble s'arr√™te de se d√©placer
        Debug.Log("Le c√¢ble a √©t√© rel√¢ch√©.");

        isDragging = false;

        // Si le c√¢ble est proche du point de connexion, il se fixe
        if (endConnectPoint != null && Vector3.Distance(transform.position, endConnectPoint.position) < 1f)
        {
            transform.position = endConnectPoint.position;
            Debug.Log("üîå C√¢ble reli√© √† " + endConnectPoint.name);
            // Enregistrer la connexion dans le dictionnaire
            if (cableConnections.ContainsKey(cableID))
            {
                cableConnections.Remove(cableID);
                Debug.Log("retrait dans le dico " + cableID);
            }
            cableConnections.Add(cableID, endConnectPoint.name);
            Debug.Log("ajout dans le dico " + cableID + " " + endConnectPoint.name);
        }
        else
        {
            // Sinon, le c√¢ble retourne √† son point de d√©part
            transform.position = startPoint.position;
            Debug.Log("‚ö†Ô∏è C√¢ble retourn√© au point de d√©part");
            if (cableConnections.ContainsKey(cableID))
            {
                cableConnections.Remove(cableID);
                Debug.Log("retrait dans le dico " + cableID);
            }
        }

        // Mise √† jour de la position de fin du c√¢ble
        lineRenderer.SetPosition(1, transform.position);

        // D√©sactive la connexion apr√®s le rel√¢chement
        endConnectPoint = null;
    }

    void OnTriggerEnter2D(Collider2D other)
    {
        Debug.Log("Objet touch√© : " + other.name + " avec le tag " + other.tag);

        if (other.CompareTag("CableEnd"))
        {
            endConnectPoint = other.transform;
            Debug.Log("üîå C√¢ble connect√© au point de connexion : " + other.name);
        }
        else
        {
            Debug.Log("C√¢ble touche un autre objet : " + other.name);
        }
    }

    void OnTriggerExit2D(Collider2D other)
    {
        // Si le c√¢ble sort du point de connexion, il ne peut plus se connecter
        if (other.CompareTag("CableEnd"))
        {
            endConnectPoint = null;
            Debug.Log("‚ö†Ô∏è C√¢ble √©loign√© du point de connexion.");
        }
    }
}
